###description of the orchestrator
1.It is listening on port(11001) for request by admin_tool(orchestrator_adm), 
2.If dynamic_scaling is set to True, it is listening for stats from stats_tool on port(11000)
	2.1.Running and stopping containers by the stats
	2.2.Making decisisons for joining node from available_servers if the maximum quota by container app_type is loaded
3.Ensures the minimum quota is fulfilled
4.Ensures the floating app_type container is always available
5.Ensures always the first container app_type(ex. smsc_br_1) to be always running


stats_adm start => start statistics tool
stats_adm stop => stop statisics tool
orchestrator_adm start api => start orchastrator
orchestrator_adm stop api  => stop orchastrator
orchestrator_adm stop container  => ex.(orchestrator_adm stop smsc_conn_http_client_1)
orchestrator_adm start appplication host_ip => ex.(orchestrator_adm start smsc_conn_http_client 10.102.7.123)


####orchestrator etcd configuration
/platform/orchestrator/dynamic_scaling => True(orchestrator make decisions for scaling up/down containers [should start the stats tool])
									   => False(orchestrator will look only for the minimum quota to be loaded from each container)

/platform/orchestrator/float_[app_type] => orchestrator is ensures always the value of the key to be a tunning container(if the container is down it will change it with running one)

/platform/orchestrator/images => json(key = app_type, value =image) from where the orchestrator is looking from which image to be runned the specific app_type container

/platform/orchestrator/logging_level => logging level of the orchestrator

/platform/orchestrator/network_name => the network in which the orchestrator will run the containers

/platform/orchestrator/platform_status => pushes on every 30 seconds the current state of the platform by hosts and app_types on them

/platform/orchestrator/token => for swarm if will be used

/platform/orchestrator/master => for swarm if will be used(node that the new nodes from available_servers will be joined to it)

/platform/orchestrator/[app_type]_min => the minimum containers that should be running and available by app_type

/platform/orchestrator/[app_type]_per_node => maximum containers that should be running and available by app_type on node

/platform/orchestrator/available_servers => nodes that can be joined if the maximum quota is overloaded and to start containers on them 

/platform/orchestrator/swarm_servers => nodes that are playing in the platform and the containers can be runned on them

/platform/orchestrator/types_instances/[app_type]/[app_type]_[digit]/ => ip address of the [app_type]_[digit](hostname)

